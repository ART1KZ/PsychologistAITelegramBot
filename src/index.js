import { Bot, InlineKeyboard, session } from "grammy";
import { psychologistPrompt } from "./systemPrompt.js";

const bot = new Bot(process.env.BOT_TOKEN);

bot.use(
    session({
        initial: () => ({
            isChatting: false,
            conversationHistory: [
                {
                    role: "system",
                    content: psychologistPrompt,
                },
            ],
        }),
    })
);

bot.command("start", async (ctx) => {
    await sendMainMenu(ctx);
});

bot.on("callback_query:data", async (ctx) => {
    const data = ctx.callbackQuery.data;

    switch (data) {
        case "emergency_help":
            await handleEmergencyHelp(ctx);
            break;
        case "in_danger":
            await handleInDanger(ctx);
            break;
        case "feeling_bad":
            await handleFeelingBad(ctx);
            break;
        case "start_chat":
            await handleStartChat(ctx);
            break;
        case "cancel":
            await sendMainMenu(ctx, false);
            break;
        default:
            await sendErrorMessage(ctx);
            break;
    }
});
bot.on("message", async (ctx) => {
    if (!ctx.session.isChatting || !ctx.message.text) {
        await sendDontUnderstandMessage(ctx);
        return;
    }

    await handleChatMessage(ctx);
});

bot.catch(async (error, ctx) => {
    await sendErrorMessage(error, ctx);
});

bot.start();

async function sendMainMenu(ctx, isNewMessage = true) {
    ctx.session.isChatting = false;

    const botMessage = `<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞! üåü</b>\n\n–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è üòä\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ ‚¨áÔ∏è`;
    const menuKeyboard = new InlineKeyboard()
        .text("üÜò –Ø –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "in_danger")
        .text("üòî –ú–Ω–µ –ø–ª–æ—Ö–æ", "feeling_bad")
        .row()
        .text("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "emergency_help")
        .row()
        .text("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", "start_chat")
        .row()
        .url("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞", process.env.STRESS_TEST_URL);

    if (isNewMessage) {
        return await ctx.reply(botMessage, {
            reply_markup: menuKeyboard,
            parse_mode: "HTML",
        });
    }

    return await ctx.editMessageText(botMessage, {
        reply_markup: menuKeyboard,
        parse_mode: "HTML",
    });
}

async function sendErrorMessage(error, ctx) {
    await ctx.reply(
        `‚ö†Ô∏è <b>–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!</b> üòî\n` +
            `–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /start`,
        { parse_mode: "HTML" }
    );
    console.error(error);
}

async function sendDontUnderstandMessage(ctx) {
    await ctx.reply(
        `ü§î <b>–û–π, —è –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏–º–µ–ª –≤ –≤–∏–¥—É!</b>\n` +
            `–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –≤–≤–µ–¥–∏ /start üåü`,
        { parse_mode: "HTML" }
    );
}

async function handleEmergencyHelp(ctx) {
    const emergencyMessage =
        `–ï—Å–ª–∏ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, <b>–∑–≤–æ–Ω–∏</b>:\n` +
        `üìû <code>112</code> ‚Äî –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã\n` +
        `ü©∫ <code>103</code> ‚Äî –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å\n` +
        `üî• <code>101</code> ‚Äî –ü–æ–∂–∞—Ä–Ω—ã–µ\n` +
        `üëÆ <code>102</code> ‚Äî –ü–æ–ª–∏—Ü–∏—è`;

    const backButton = new InlineKeyboard().text("‚ùå –ù–∞–∑–∞–¥", "cancel");

    await ctx.answerCallbackQuery();
    await ctx.editMessageText(emergencyMessage, {
        reply_markup: backButton,
        parse_mode: "HTML",
    });
}

async function handleInDanger(ctx) {
    const inDangerMessage =
        `1. üë®‚Äçüè´ <b>–°–æ–æ–±—â–∏ –≤–∑—Ä–æ—Å–ª–æ–º—É</b>\n` +
        `–ù–∞–π–¥–∏ –∫–æ–≥–æ-—Ç–æ, –∫–æ–º—É –¥–æ–≤–µ—Ä—è–µ—à—å: —Ä–æ–¥–∏—Ç–µ–ª—è, —É—á–∏—Ç–µ–ª—è, —Å—Ç–∞—Ä—à–µ–≥–æ –±—Ä–∞—Ç–∞ –∏–ª–∏ —Å–µ—Å—Ç—Ä—É\n` +
        `–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–º–æ–≥–ª–∏\n` +
        `–ï—Å–ª–∏ —Ä—è–¥–æ–º –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Å—Ä–∞–∑—É –∑–≤–æ–Ω–∏ üìû <code>112</code> ‚Äî —ç—Ç–æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞ –†–æ—Å—Å–∏–∏\n\n` +
        `2. üòå <b>–°–æ—Ö—Ä–∞–Ω—è–π —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ</b>\n` +
        `–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö: —Å—á–∏—Ç–∞–π –¥–æ 4, –≤–¥—ã—Ö–∞—è —á–µ—Ä–µ–∑ –Ω–æ—Å, –∏ –¥–æ 6, –≤—ã–¥—ã—Ö–∞—è —á–µ—Ä–µ–∑ —Ä–æ—Ç\n` +
        `–ü–æ–≤—Ç–æ—Ä–∏ —ç—Ç–æ 3 —Ä–∞–∑–∞, —á—Ç–æ–±—ã —É—Å–ø–æ–∫–æ–∏—Ç—å –Ω–µ—Ä–≤—ã\n` +
        `–ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ú–µ–Ω—è –ø—É–≥–∞—é—Ç —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤¬ª)\n\n` +
        `3. üì∏ <b>–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π</b>\n` +
        `–ï—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø–∏—à–∏ —É–≥—Ä–æ–∑—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏–ª–∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ–∫—Ä—É–≥\n` +
        `–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–æ–∑–∂–µ`;

    const backButton = new InlineKeyboard().text("‚ùå –ù–∞–∑–∞–¥", "cancel");

    await ctx.answerCallbackQuery();
    await ctx.editMessageText(inDangerMessage, {
        reply_markup: backButton,
        parse_mode: "HTML",
    });
}

async function handleFeelingBad(ctx) {
    const feelingBadMessage =
        `1. ‚è∏Ô∏è <b>–°–¥–µ–ª–∞–π –ø–∞—É–∑—É</b>\n` +
        `–û—Ç–æ–π–¥–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç: –≤—ã–π–¥–∏ –Ω–∞ —É–ª–∏—Ü—É, –≤—ã–ø–µ–π –≤–æ–¥—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–¥–∏ —Ç–∏—Ö–æ\n` +
        `–ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ¬´5-4-3-2-1¬ª, —á—Ç–æ–±—ã —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è:\n` +
        `üëÄ –ù–∞–∑–æ–≤–∏ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—à—å –≤–æ–∫—Ä—É–≥\n` +
        `üëÇ –ù–∞–∑–æ–≤–∏ 4 –∑–≤—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—ã—à–∏—à—å\n` +
        `‚úã –ù–∞–∑–æ–≤–∏ 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—à—å –ø–æ—Ç—Ä–æ–≥–∞—Ç—å\n` +
        `üëÉ –ù–∞–∑–æ–≤–∏ 2 –∑–∞–ø–∞—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ —á—É–≤—Å—Ç–≤—É–µ—à—å\n` +
        `üëÖ –ù–∞–∑–æ–≤–∏ 1 –≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å\n\n` +
        `2. ‚úçÔ∏è <b>–†–∞—Å—Å–∫–∞–∂–∏ –æ —á—É–≤—Å—Ç–≤–∞—Ö</b>\n` +
        `–í—ã–±–µ—Ä–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —á–∞—Ç", –∏ –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `¬´–°–µ–π—á–∞—Å —è —á—É–≤—Å—Ç–≤—É—é [—ç–º–æ—Ü–∏—è], –ø–æ—Ç–æ–º—É —á—Ç–æ [–ø—Ä–∏—á–∏–Ω–∞]. –•–æ—á—É [–∂–µ–ª–∞–Ω–∏–µ]¬ª\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ì—Ä—É—Å—Ç–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ—Å—Å–æ—Ä–∏–ª—Å—è —Å –¥—Ä—É–≥–æ–º. –•–æ—á—É, —á—Ç–æ–±—ã –æ–Ω –∏–∑–≤–∏–Ω–∏–ª—Å—è¬ª\n\n` +
        `3. üß° <b>–ü–æ–ª—É—á–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n` +
        `–ü–æ–∑–≤–æ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤–µ–¥—å —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å:\n` +
        `üìû <code>8-800-2000-122</code> ‚Äî –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤\n` +
        `üìû <code>8-800-7000-600</code> ‚Äî –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–º–æ—â—å –¥–ª—è –≤—Å–µ—Ö`;

    const backButton = new InlineKeyboard().text("‚ùå –ù–∞–∑–∞–¥", "cancel");

    await ctx.answerCallbackQuery();
    await ctx.editMessageText(feelingBadMessage, {
        reply_markup: backButton,
        parse_mode: "HTML",
    });
}

async function handleStartChat(ctx) {
    ctx.session.isChatting = true;

    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
        `üí¨ <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –≤–∫–ª—é—á—ë–Ω!</b>\n` +
            `–ü–∏—à–∏ –º–Ω–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –º—ã—Å–ª–∏, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å üòä\n` +
            `–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏ /start`,
        {
            parse_mode: "HTML",
        }
    );
}

async function handleChatMessage(ctx) {
    ctx.session.conversationHistory.push({
        role: "user",
        content: ctx.message.text,
    });

    try {
        const response = await fetch(process.env.AI_API_URL, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${process.env.AI_API_TOKEN}`,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                model: "mistral-large-2411",
                messages: ctx.session.conversationHistory,
            }),
        });
        const data = await response.json();

        const assistantResponse = data.choices[0].message.content;
        ctx.session.conversationHistory.push({
            role: "assistant",
            content: assistantResponse,
        });

        const botMessage = `${assistantResponse}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —á–∞—Ç, –≤–≤–µ–¥–∏ /start`;

        await ctx.reply(botMessage);
    } catch (error) {
        await sendErrorMessage(ctx);
        console.error(error);
    }
}